const express = require('express');
const { DefaultAzureCredential } = require('@azure/identity');
const { AutomationClient } = require('@azure/arm-automation');
const jwt = require('jsonwebtoken');
const path = require('path');
const helmet = require('helmet');

const app = express();
const port = process.env.PORT || 8080;

// Enhanced security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "https://alcdn.msauth.net", "'unsafe-inline'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https://login.microsoftonline.com", "https://graph.microsoft.com"],
      frameSrc: ["'self'"],
      objectSrc: ["'none'"],
      upgradeInsecureRequests: []
    }
  },
  crossOriginEmbedderPolicy: false
}));

// Configuration from environment variables
const config = {
    azureClientId: process.env.AZURE_CLIENT_ID,
    azureTenantId: process.env.AZURE_TENANT_ID,
    subscriptionId: process.env.AZURE_SUBSCRIPTION_ID,
    resourceGroupName: process.env.RESOURCE_GROUP_NAME,
    automationAccountName: process.env.AUTOMATION_ACCOUNT_NAME,
    keyVaultUri: process.env.KEY_VAULT_URI,
    sessionTimeout: process.env.SESSION_TIMEOUT_MINUTES || 60
};

app.use(express.json());

// Initialize Azure clients
const credential = new DefaultAzureCredential();
let automationClient;

try {
    if (config.subscriptionId) {
        automationClient = new AutomationClient(credential, config.subscriptionId);
    }
} catch (error) {
    console.warn('Azure automation client initialization failed:', error.message);
}

// Enhanced JWT verification middleware
function verifyToken(req, res, next) {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ 
            error: 'Authentication required',
            requiresLogin: true
        });
    }

    const token = authHeader.substring(7);
    
    try {
        const decoded = jwt.decode(token);
        
        if (!decoded) {
            return res.status(401).json({ error: 'Invalid token' });
        }

        const expirationTime = decoded.exp * 1000;
        if (Date.now() >= expirationTime) {
            return res.status(401).json({ 
                error: 'Token expired',
                requiresLogin: true
            });
        }

        req.user = {
            upn: decoded.upn || decoded.unique_name || decoded.preferred_username,
            name: decoded.name,
            roles: decoded.roles || [],
            tenantId: decoded.tid,
            oid: decoded.oid
        };
        
        next();
    } catch (error) {
        console.error('Token verification failed:', error);
        return res.status(401).json({ 
            error: 'Token verification failed',
            requiresLogin: true
        });
    }
}

// Main page
app.get('/', (req, res) => {
    res.send(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Entra Management Console</title>
    <script src="https://alcdn.msauth.net/browser/2.38.3/js/msal-browser.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
        }

        .status-badge {
            position: absolute;
            top: 10px;
            right: 20px;
            background: rgba(34, 197, 94, 0.9);
            color: white;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
        }

        .login-container {
            max-width: 500px;
            margin: 50px auto;
            text-align: center;
            padding: 40px;
        }

        .btn {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            border: none;
            padding: 14px 28px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(99, 102, 241, 0.3);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .btn-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
        }

        .status-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            margin: 25px;
            border-left: 5px solid #6366f1;
        }

        .alert {
            padding: 15px 20px;
            border-radius: 10px;
            margin: 15px 25px;
            font-weight: 500;
        }

        .alert-success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #a7f3d0;
        }

        .alert-warning {
            background: #fef3c7;
            color: #92400e;
            border: 1px solid #fcd34d;
        }

        .hidden { display: none; }

        .logout-btn {
            position: absolute;
            top: 20px;
            right: 80px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
        }

        .user-info {
            background: #d4edda;
            padding: 15px;
            border-radius: 10px;
            margin: 25px;
            text-align: left;
        }

        .nav-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .nav-tab {
            flex: 1;
            padding: 20px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            color: #6c757d;
            transition: all 0.3s ease;
        }

        .nav-tab.active {
            background: white;
            color: #6366f1;
            border-bottom: 3px solid #6366f1;
        }

        .tab-content {
            padding: 30px;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .help-text {
            font-size: 12px;
            color: #6b7280;
            margin-top: 5px;
        }

        ul { margin-left: 20px; margin-top: 10px; }
        li { margin-bottom: 5px; }

        @media (max-width: 768px) {
            .form-row { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Login Screen -->
        <div id="loginContainer" class="login-container">
            <h1>üéØ Entra Management Console</h1>
            <div class="status-badge">DEPLOYED v2.0</div>
            <p style="margin: 20px 0; color: #666;">
                Production Entra ID management platform.<br>
                Sign in with your organizational account to continue.
            </p>
            <button id="loginBtn" class="btn">üîê Sign In with Entra ID</button>
            
            <div style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; text-align: left;">
                <h4>‚úÖ Infrastructure Status:</h4>
                <ul>
                    <li>‚úÖ Azure App Service: Running</li>
                    <li>‚úÖ Automation Account: ${config.automationAccountName || 'Configured'}</li>
                    <li>‚úÖ Authentication: Enabled</li>
                    <li>‚úÖ Node.js ${process.version}</li>
                </ul>
            </div>
        </div>

        <!-- Main Application -->
        <div id="mainApp" class="hidden">
            <div class="header">
                <h1>üéØ Entra Management Console</h1>
                <p>Production Entra ID Management Platform</p>
                <div class="status-badge">LIVE</div>
                <button id="logoutBtn" class="logout-btn">Sign Out</button>
            </div>

            <div id="userInfo" class="user-info"></div>

            <div class="nav-tabs">
                <button class="nav-tab active" onclick="switchTab('dashboard')">Dashboard</button>
                <button class="nav-tab" onclick="switchTab('extensions')">Extension Attributes</button>
                <button class="nav-tab" onclick="switchTab('devices')">Device Cleanup</button>
                <button class="nav-tab" onclick="switchTab('groups')">Group Management</button>
            </div>

            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <h2>System Dashboard</h2>
                <div class="status-card">
                    <h3>‚úÖ System Status</h3>
                    <ul>
                        <li>‚úÖ Web Application: Running on Node.js ${process.version}</li>
                        <li>‚úÖ Azure Authentication: Active</li>
                        <li>‚úÖ Automation Account: ${config.automationAccountName || 'Connected'}</li>
                        <li>‚úÖ Resource Group: ${config.resourceGroupName || 'Connected'}</li>
                        <li>‚úÖ Key Vault: Connected</li>
                    </ul>
                </div>
                <div id="permissionsSummary" class="status-card">
                    <h3>üîê Your Access</h3>
                    <p>‚úÖ Authenticated user - permissions evaluated per operation</p>
                </div>
            </div>

            <!-- Extension Attributes Tab -->
            <div id="extensions" class="tab-content">
                <h2>Extension Attribute Management</h2>
                <div class="alert alert-success">
                    <strong>‚úÖ Extension Attributes Ready</strong><br>
                    Requires: User Administrator or Global Administrator roles.
                </div>
                <form id="extensionForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="attributeNumber">Extension Attribute (1-15)</label>
                            <select id="attributeNumber" required>
                                <option value="">Select Attribute</option>
                                <option value="1">Extension Attribute 1</option>
                                <option value="2">Extension Attribute 2</option>
                                <option value="3">Extension Attribute 3</option>
                                <option value="4">Extension Attribute 4</option>
                                <option value="5">Extension Attribute 5</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="attributeValue">Attribute Value</label>
                            <input type="text" id="attributeValue" maxlength="256" placeholder="Enter value">
                            <div class="help-text">Maximum 256 characters</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="usersToAdd">Users to Add/Update</label>
                        <textarea id="usersToAdd" rows="3" placeholder="user1@domain.com, user2@domain.com"></textarea>
                        <div class="help-text">Comma-separated email addresses</div>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-warning" onclick="executeExtensions(true)">
                            üîç Preview Changes
                        </button>
                        <button type="button" class="btn" onclick="executeExtensions(false)">
                            ‚ñ∂Ô∏è Execute Changes
                        </button>
                    </div>
                </form>
            </div>

            <!-- Device Cleanup Tab -->
            <div id="devices" class="tab-content">
                <h2>Device Cleanup Management</h2>
                <div class="alert alert-success">
                    <strong>‚úÖ Device Cleanup Ready</strong><br>
                    Requires: Cloud Device Administrator or Global Administrator roles.
                </div>
                <form id="deviceForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="maxDevices">Maximum Devices to Process</label>
                            <input type="number" id="maxDevices" value="50" min="1" max="500">
                        </div>
                        <div class="form-group">
                            <label for="excludeAzureVMs">Exclude Azure VMs</label>
                            <select id="excludeAzureVMs">
                                <option value="true">Yes (Recommended)</option>
                                <option value="false">No</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-warning" onclick="executeDeviceCleanup(true)">
                            üîç Preview Cleanup
                        </button>
                        <button type="button" class="btn btn-danger" onclick="executeDeviceCleanup(false)">
                            üóëÔ∏è Execute Cleanup
                        </button>
                    </div>
                </form>
            </div>

            <!-- Group Management Tab -->
            <div id="groups" class="tab-content">
                <h2>Group Management</h2>
                <div class="alert alert-success">
                    <strong>‚úÖ Group Management Ready</strong><br>
                    Requires: Groups Administrator or Global Administrator roles.
                </div>
                <form id="groupForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="groupName">Group Name</label>
                            <input type="text" id="groupName" placeholder="Enter group name">
                        </div>
                        <div class="form-group">
                            <label for="groupCleanupDays">Cleanup Threshold (Days)</label>
                            <input type="number" id="groupCleanupDays" value="14" min="1" max="365">
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-warning" onclick="executeGroupCleanup(true)">
                            üîç Preview Cleanup
                        </button>
                        <button type="button" class="btn" onclick="executeGroupCleanup(false)">
                            üë• Execute Cleanup
                        </button>
                    </div>
                </form>
            </div>

            <div id="alertsContainer"></div>
        </div>
    </div>

    <script>
        // MSAL Configuration
        const msalConfig = {
            auth: {
                clientId: "${config.azureClientId || 'your-client-id'}",
                authority: "https://login.microsoftonline.com/${config.azureTenantId || 'your-tenant-id'}",
                redirectUri: window.location.origin
            },
            cache: {
                cacheLocation: "localStorage",
                storeAuthStateInCookie: false
            }
        };

        const msalInstance = new msal.PublicClientApplication(msalConfig);
        let currentUser = null;
        let accessToken = null;

        const loginRequest = {
            scopes: ["User.Read", "Directory.Read.All"]
        };

        // Initialize authentication
        async function initAuth() {
            try {
                await msalInstance.initialize();
                const accounts = msalInstance.getAllAccounts();
                if (accounts.length > 0) {
                    currentUser = accounts[0];
                    await getAccessToken();
                    showMainApp();
                } else {
                    showLoginScreen();
                }
            } catch (error) {
                console.error('Auth initialization failed:', error);
            }
        }

        // Sign in
        async function signIn() {
            try {
                const response = await msalInstance.loginPopup(loginRequest);
                currentUser = response.account;
                accessToken = response.accessToken;
                showMainApp();
            } catch (error) {
                console.error('Sign in failed:', error);
                showAlert('Sign in failed: ' + error.message, 'warning');
            }
        }

        // Get access token
        async function getAccessToken() {
            try {
                const tokenRequest = { ...loginRequest, account: currentUser };
                const response = await msalInstance.acquireTokenSilent(tokenRequest);
                accessToken = response.accessToken;
                return accessToken;
            } catch (error) {
                try {
                    const response = await msalInstance.acquireTokenPopup(tokenRequest);
                    accessToken = response.accessToken;
                    return accessToken;
                } catch (interactiveError) {
                    console.error('Token acquisition failed:', interactiveError);
                    return null;
                }
            }
        }

        function showMainApp() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('mainApp').classList.remove('hidden');
            updateUserInfo();
        }

        function showLoginScreen() {
            document.getElementById('loginContainer').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
        }

        function updateUserInfo() {
            if (currentUser) {
                document.getElementById('userInfo').innerHTML = \`
                    <h4>üë§ Signed in as: \${currentUser.name || 'User'}</h4>
                    <p><strong>Email:</strong> \${currentUser.username}</p>
                    <p><strong>Tenant:</strong> \${currentUser.tenantId}</p>
                \`;
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        function showAlert(message, type = 'warning') {
            const alertsContainer = document.getElementById('alertsContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = \`alert alert-\${type}\`;
            alertDiv.innerHTML = \`
                \${message}
                <button onclick="this.parentElement.remove()" style="float: right; background: none; border: none; font-size: 18px; cursor: pointer;">&times;</button>
            \`;
            alertsContainer.appendChild(alertDiv);
            setTimeout(() => {
                if (alertDiv.parentElement) alertDiv.remove();
            }, 5000);
        }

        async function executeExtensions(whatIf = true) {
            if (!accessToken) {
                showAlert('Please sign in again', 'warning');
                return;
            }

            const params = {
                Operation: 'ExtensionAttributes',
                WhatIf: whatIf,
                ExtensionAttributeNumber: parseInt(document.getElementById('attributeNumber').value),
                AttributeValue: document.getElementById('attributeValue').value,
                UsersToAdd: document.getElementById('usersToAdd').value,
                UserContext: { upn: currentUser.username, name: currentUser.name }
            };

            await executeRunbook(params, whatIf ? 'Extension Attributes Preview' : 'Extension Attributes Execution');
        }

        async function executeDeviceCleanup(whatIf = true) {
            if (!accessToken) {
                showAlert('Please sign in again', 'warning');
                return;
            }

            const params = {
                Operation: 'DeviceCleanup',
                WhatIf: whatIf,
                MaxDevices: parseInt(document.getElementById('maxDevices').value),
                ExcludeAzureVMs: document.getElementById('excludeAzureVMs').value === 'true',
                UserContext: { upn: currentUser.username, name: currentUser.name }
            };

            await executeRunbook(params, whatIf ? 'Device Cleanup Preview' : 'Device Cleanup Execution');
        }

        async function executeGroupCleanup(whatIf = true) {
            if (!accessToken) {
                showAlert('Please sign in again', 'warning');
                return;
            }

            const params = {
                Operation: 'GroupCleanup',
                WhatIf: whatIf,
                GroupName: document.getElementById('groupName').value,
                GroupCleanupDays: parseInt(document.getElementById('groupCleanupDays').value),
                UserContext: { upn: currentUser.username, name: currentUser.name }
            };

            await executeRunbook(params, whatIf ? 'Group Cleanup Preview' : 'Group Cleanup Execution');
        }

        async function executeRunbook(params, operationName) {
            try {
                const response = await fetch('/api/execute-runbook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': \`Bearer \${accessToken}\`
                    },
                    body: JSON.stringify(params)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || \`HTTP error! status: \${response.status}\`);
                }

                const result = await response.json();
                
                if (result.success) {
                    showAlert(\`‚úÖ \${operationName} started successfully! Job ID: \${result.jobId}\`, 'success');
                } else {
                    showAlert(\`‚ùå Failed to start \${operationName}: \${result.error}\`, 'warning');
                }
                
            } catch (error) {
                console.error('Error executing runbook:', error);
                showAlert(\`‚ùå Error starting \${operationName}: \${error.message}\`, 'warning');
            }
        }

        async function signOut() {
            try {
                await msalInstance.logoutPopup();
                currentUser = null;
                accessToken = null;
                showLoginScreen();
            } catch (error) {
                console.error('Sign out failed:', error);
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('loginBtn').addEventListener('click', signIn);
            document.getElementById('logoutBtn').addEventListener('click', signOut);
            initAuth();
        });
    </script>
</body>
</html>`);
});

// API Routes
app.post('/api/execute-runbook', verifyToken, async (req, res) => {
    try {
        const { Operation, WhatIf, UserContext, ...params } = req.body;
        
        if (!automationClient) {
            return res.status(500).json({
                success: false,
                error: 'Azure Automation client not initialized'
            });
        }

        const runbookParams = {
            ...params,
            Operation,
            WhatIf,
            ExecutedBy: req.user.upn,
            ExecutedByName: req.user.name,
            ExecutionContext: 'WebApp'
        };

        const jobResult = await automationClient.jobs.create(
            config.resourceGroupName,
            config.automationAccountName,
            'Manage-ExtensionAttributes',
            { parameters: runbookParams }
        );

        res.json({
            success: true,
            jobId: jobResult.jobId,
            message: `${Operation} started successfully`,
            executedBy: req.user.upn
        });

    } catch (error) {
        console.error('Error executing runbook:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy',
        timestamp: new Date().toISOString(),
        nodeVersion: process.version,
        port: port,
        automation: automationClient ? 'connected' : 'not available',
        config: {
            azureClientId: config.azureClientId ? 'configured' : 'missing',
            azureTenantId: config.azureTenantId ? 'configured' : 'missing',
            automationAccount: config.automationAccountName || 'not configured'
        }
    });
});

app.listen(port, () => {
    console.log(`üéØ Entra Management Console running on port ${port}`);
    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log(`Node.js version: ${process.version}`);
    console.log(`Azure Client ID: ${config.azureClientId ? 'Configured' : 'Missing'}`);
    console.log(`Azure Tenant ID: ${config.azureTenantId ? 'Configured' : 'Missing'}`);
    console.log(`Automation Account: ${config.automationAccountName || 'Not configured'}`);
    console.log(`Automation Client: ${automationClient ? 'Initialized' : 'Not available'}`);
});